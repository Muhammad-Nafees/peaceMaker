diff --git a/node_modules/react-native-select-dropdown/index.d.ts b/node_modules/react-native-select-dropdown/index.d.ts
index 2f7ab48..a8c2ca8 100644
--- a/node_modules/react-native-select-dropdown/index.d.ts
+++ b/node_modules/react-native-select-dropdown/index.d.ts
@@ -11,6 +11,8 @@ declare module 'react-native-select-dropdown' {
      * function recieves selected item and its index in data array
      */
     onSelect: (selectedItem: any, index: number) => void;
+
+    defaultScrolledPosition : number;
     /**
      * default button text when no item is selected
      */
diff --git a/node_modules/react-native-select-dropdown/src/SelectDropdown.js b/node_modules/react-native-select-dropdown/src/SelectDropdown.js
index e518000..4f542d5 100644
--- a/node_modules/react-native-select-dropdown/src/SelectDropdown.js
+++ b/node_modules/react-native-select-dropdown/src/SelectDropdown.js
@@ -1,15 +1,15 @@
-import React, {forwardRef, useImperativeHandle} from 'react';
-import {View, Text, TouchableOpacity, FlatList} from 'react-native';
+import React, { forwardRef, useImperativeHandle } from 'react';
+import { View, Text, TouchableOpacity, FlatList } from 'react-native';
 import styles from './styles';
-import {isExist} from './helpers/isExist';
-import {mergeStyles} from './helpers/mergeStyles';
+import { isExist } from './helpers/isExist';
+import { mergeStyles } from './helpers/mergeStyles';
 import Input from './components/Input';
 import DropdownOverlay from './components/DropdownOverlay';
 import DropdownModal from './components/DropdownModal';
 import DropdownWindow from './components/DropdownWindow';
-import {useSelectDropdown} from './hooks/useSelectDropdown';
-import {useLayoutDropdown} from './hooks/useLayoutDropdown';
-import {useRefs} from './hooks/useRefs';
+import { useSelectDropdown } from './hooks/useSelectDropdown';
+import { useLayoutDropdown } from './hooks/useLayoutDropdown';
+import { useRefs } from './hooks/useRefs';
 
 const SelectDropdown = (
   {
@@ -53,12 +53,13 @@ const SelectDropdown = (
     renderSearchInputLeftIcon /* function returns React component for search input icon */,
     renderSearchInputRightIcon /* function returns React component for search input icon */,
     onChangeSearchInputText /* function callback when the search input text changes, this will automatically disable the dropdown's interna search to be implemented manually outside the component  */,
+    defaultScrolledPosition
   },
   ref,
 ) => {
   const disabledInternalSearch = !!onChangeSearchInputText;
   /* ******************* hooks ******************* */
-  const {dropdownButtonRef, dropDownFlatlistRef} = useRefs();
+  const { dropdownButtonRef, dropDownFlatlistRef } = useRefs();
   const {
     dataArr, //
     selectedItem,
@@ -114,6 +115,9 @@ const SelectDropdown = (
         animated: true,
       });
     }
+
+
+    if (defaultScrolledPosition && selectedIndex < 0) dropDownFlatlistRef.current.scrollToIndex({ animated: true, index: defaultScrolledPosition });
   };
   const onSelectItem = (item, index) => {
     closeDropdown();
@@ -142,7 +146,7 @@ const SelectDropdown = (
       )
     );
   };
-  const renderFlatlistItem = ({item, index}) => {
+  const renderFlatlistItem = ({ item, index }) => {
     const isSelected = index == selectedIndex;
     return (
       isExist(item) && (
